#!/usr/bin/env bash

set -o pipefail
set -e

build_dir="$1"
cache_dir="$2"
env_dir="$3"

buildkite_dir=".buildkite"

mkdir -p "$build_dir/$buildkite_dir/"{builds,hooks} "$build_dir/.profile.d" "$cache_dir"

# TODO: what happens when we can't hit GH API. Can we try to fallback on the
#       cache? If built at least once, there should be some agent there,
#       presumably.
read version file_name url <<< "$(ruby -rjson -rnet/https <<RUBY | xargs echo
   http         = Net::HTTP.new("api.github.com", 443)
   http.use_ssl = true
   req          = Net::HTTP::Get.new("/repos/buildkite/agent/releases/latest")
   body         = http.request(req).body
   release      = JSON.parse(body)
   asset        = release["assets"].detect { |a| a["state"] == "uploaded" && a["name"]["linux-amd64"] }
   name         = asset["name"] if asset
   url          = asset["url"] if asset

   puts release["name"], name, url
RUBY
)"

(
    cd "$cache_dir"

    if [ -f "$file_name" ]; then
        # We already have the latest version
        :
    else
        echo "-----> Installing Buildkite Agent $version"
        curl --silent -L -o "$file_name" -H 'Accept: application/octet-stream' "$url"
        ln -s "$file_name" buildkite-agent-latest.tar.gz
    fi
)

# Don't overwrite files so that users can commit .buildkite/bootstrap.sh et al without it getting clobbered
tar xzf "$cache_dir/buildkite-agent-latest.tar.gz" -C "$build_dir/$buildkite_dir"
chmod +x "$build_dir/$buildkite_dir/buildkite-agent"

cat <<EOF > "$build_dir/.profile.d/buildkite.sh"
BUILDKITE_HOOKS_PATH="\${BUILDKITE_HOOKS_PATH:-/app/$buildkite_dir/hooks}"

if [ "x\$BUILDKITE_AGENT_NAME" = "x" ]; then
    # \$DYNO will be "dyno-process-type.pid" (e.g. agent.1)
    BUILDKITE_AGENT_NAME="heroku-dyno.\$DYNO"
fi

export BUILDKITE_AGENT_NAME BUILDKITE_HOOKS_PATH
EOF

if [ ! -f "$env_dir/BUILDKITE_AGENT_TOKEN" ]; then
    echo "-----> WARNING: No BUILDKITE_AGENT_TOKEN environment variable set!"
    echo "       This needs to be set in order for the Buildkite agent to run."
fi
